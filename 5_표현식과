// 예제 05-01 10 + 20은 평가되어 숫자 값 30을 생성한다.
10 + 20;

// 변수에는 10 + 20이 평가되어 생성된 숫자 값 30이 할당된다.
// 예제 05-02
var sum = 10 + 20;

// 리터럴은 사람이 이해할 수 있는 문자 또는 약속된 기호를 사용해 값을 생성하는 표기법
// 예제 05-03

3

// 표현식은 값으로 평갈될 수 있는 문이다. 즉 표현식이 평가되면 새로운 값을 생성하거나 기존값을 참조한다
// 예제 05-04

var score = 100;

// 예제 05-05

var score = 50 + 50;

// 예제 05-06


score; // 100


// 예제 05-07

// 리터럴 표현식
10
'hello'

// 식발자 표현식(선언이 이미 존재한다고 가정)
sum
person.name
arr[1]

// 연산자 표현식
10 + 20
sum = 10
sum !== 10

// 함수/메서드 호출 표현식(선언이 이미 존재했다고 가정)
square()
person.getName()

// 예제 05-08
var x = 1 + 2;
x + 3; // 6

// 문은 프로그램을 구성하는 기본 단위이자 최소 실행 단위다

//예제 05-09 문은 선언문,할당문,조건문,박복문 등으로 구분할 수 있다.

var x; //변수 선언문

x = 5; //할당문

function foo () {} //함수 선언문

if (x > 1) { console.log(x);} // 조건문

for (var i = 0; i < 2; i++) { console.log(i);} //반복문

// 예제 05-10 if 문, for 문, 함수 등의 코드 블록 뒤에는 세미클론xx 자체 종결성이 있기 떄문
function foo () {
    return
    {}
}

console.log(fo()); 

var bar = function () {}
(function() {})();

// 예제 05-011 표현식은 문의 일부일 수도 있고 그 자체로 문이 될 수도 있다.

// 변수 선언문은 값으로 평가될 수 없으므로 표현식이 아니다.
var x;
// 1, 2, 1 + 2, x = 1 + 2는 모두 표현식이다
// x = 1 + 2는 표현식이면서 완전한 문이기도 하다.
x = 1 + 2;

// 표현식인 문과 표현식이 아닌 문을 구별하는 가장 간단하고 명료한 방법은 변수에 할당해 보는 것이다.

// 예제 05-12

// 변수 선언문은 표현식이 아닌 문이다
var x;

// 할당문은 그 자체가 표현식이지만 완전한 문이기도 하다. 즉, 할당문은 표현식인 문이다.
x = 100;

// 예제 05-13

var foo = var x; //표현식이 아닌 문은 값처럼 사용할 수 없다.


// 예제 05-14
// 표현식인 문은 값처럼 사용할 수 있다.
var foo = x = 100;
console.log(foo); //100



// 문이랑 표현식을 구분 잘 하는게 핵심인 것 같다.
// 문은 프로그램을 구성하는 기본 단위이자 최소 실행 단위이다.
// 표현식은 값으로 평가될 수 있는 문이다.
